name: test_check

on:
  push:
  pull_request:

env:
  PYTHON_VERSION: "3.11"
  POSTGRES_VERSION: "15"

jobs:
  test-and-sonar:
    name: Test & SonarCloud Analysis
    runs-on: ubuntu-latest
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_PROJECT_52 }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
      PYTHONUNBUFFERED: 1

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Make build.sh executable
        run: chmod +x build.sh

      - name: Install dependencies
        run: |
          make build

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Run linter
        run: |
          source .venv/bin/activate
          make lint

      - name: Run tests with coverage
        run: |
          source .venv/bin/activate
          make test
          make test-coverage


      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: >
            -Dsonar.organization=mirroel-alvares
            -Dsonar.projectKey=Mirroel-Alvares_python-project-52
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.sources=.
            -Dsonar.exclusions=**/migrations/**,**/tests/**,**/static/**
            -Dsonar.tests=statuses/tests,tasks/tests,labels/tests,users/tests
            -Dsonar.test.inclusions=**/test_*.py
            -Dsonar.python.version=${{ env.PYTHON_VERSION }}
            -Dsonar.ci.autoconfig.disabled=true